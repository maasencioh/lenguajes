grammar = [
    ("S",[ "estructura" , "id" , "E" , "fin_estructura" , "S"]),            #DONE
    ("S",[ "funcion" , "entero" , "id" , "(" , "PARAMETROS" , ")" , "hacer" , "retornar" , "fin_funcion"]),
    ("S",[ "funcion" , "booleano" , "id" , "(" , "PARAMETROS" , ")" , "hacer" , "retornar" , "fin_funcion"]),
    ("S",[ "funcion" , "caracter" , "id" , "(" , "PARAMETROS" , ")" , "hacer" , "CUERPO" , "retornar" , "fin_funcion"]),
    ("S",[ "funcion" , "real" , "id" , "(" , "PARAMETROS" , ")" , "hacer" , "retornar" , "fin_funcion"]),
    ("S",[ "funcion" , "cadena" , "id" , "(" , "PARAMETROS" , ")" , "hacer" , "retornar" , "fin_funcion"]),
    ("S",[ "funcion_principal" , "A" , "fin_principal" ]),
    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ESTADOS PARA LA ESTRUCTURA
    ("E",[ "DECLARACION" , "E" ]),
    ("E",[]),
    ("DECLARACION",[ "entero" , "intd" ]),
    ("DECLARACION",[ "booleano", "boold" ]),
    ("DECLARACION",[ "caracter", "chard" ]),
    ("DECLARACION",[ "real", "floatd" ]),
    ("DECLARACION",[ "cadena", "stringd" ]),
    ("DECLARACION",[ ]),
    ('intd',[ "id" , "red" , "PUNTOCOMA" , "DECLARACION" ]),
    ('intd',[ "id" , "PUNTOCOMA" , "DECLARACION" ]),
    ("red",[ "tk_coma" , "id" , "red" ]),z
    ("red",[]),
    ('boold',[ "id" , "rbd" , "PUNTOCOMA" , "DECLARACION" ]),
    ('boold',[ "id" , "PUNTOCOMA" , "DECLARACION" ]),
    ("rbd",[ "tk_coma" , "id" , "rbd" ]),
    ("rbd",[]),
    ('floatd',[ "id" , "rrd" , "PUNTOCOMA" , "DECLARACION" ]),
    ('floatd',[ "id" , "tk_pyc" , "DECLARACION" ]),
    ("rrd",[ "tk_coma" , "id" , "rrd" ]),
    ("rrd",[]),
    ('stringd',[ "id" , "rsd" , "PUNTOCOMA" , "DECLARACION" ]),
    ('stringd',[ "id" , "PUNTOCOMA" , "DECLARACION" ]),
    ("rsd",[ "tk_coma" , "id" , "rsd" ]),
    ("rsd",[]),
    ('chard',[ "id" , "rcd" , "PUNTOCOMA" , "DECLARACION" ]),
    ('chard',[ "id" , "PUNTOCOMA" , "DECLARACION" ]),
    ("rcd",[ "tk_coma" , "id" , "rcd" ]),
    ("rcd",[]),
    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ESTADOS PARA LOS PARAMETROS
    ("PARAMETROS",[ "entero" , "id" , "intp" ]),
    ("PARAMETROS",[ "booleano", "id" , "boolp" ]),
    ("PARAMETROS",[ "caracter", "id" , "charp" ]),
    ("PARAMETROS",[ "real", "id" , "floatp" ]),
    ("PARAMETROS",[ "cadena", "id" , "stringp" ]),
    ('intp',[ "id" , "tk_coma" , "intp" ]),
    ('intp',[]),
    ('boolp',[ "id" , "tk_coma" , "boolp" ]),
    ('boolp',[]),
    ('charp',[ "id" , "tk_coma" , "charp" ]),
    ('charp',[]),
    ('floatp',[ "id" , "tk_coma" , "floatp" ]),
    ('floatp',[]),
    ('stringp',[ "id" , "tk_coma" , "stringp" ]),
    ('stringp',[]),

    ("CUERPO",[ "DECLARACION" , "CUERPO" ]),
    ("CUERPO",[ "ASIGNACION" , "CUERPO" ]),
    ("CUERPO",[]),#falta agregar casos....
    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    ("ASIGNACION",[ "entero" , "int" ]),
    ("ASIGNACION",[ "booleano", "bool" ]),
    ("ASIGNACION",[ "caracter", "char" ]),
    ("ASIGNACION",[ "real", "float" ]),
    ("ASIGNACION",[ "cadena", "string" ]),
    ('int',[ "id" , "re" , "PUNTOCOMA" ]),
    ('int',[ "id" , "PUNTOCOMA" ]),
    ("re",[ "tk_coma" , "id" , "re" , "ae" ]),
    ("re",[]),
    ("ae",["tk_asing" , "tk_entero"]),
    ("ae",[]),
    ('bool',[ "id" , "rb" , "PUNTOCOMA" ]),
    ('bool',[ "id" , "PUNTOCOMA" ]),
    ("rb",[ "tk_coma" , "id" , "rb" , "ab" ]),
    ("rb",[]),
    ("ab",["tk_asing" , "verdadero"]),
    ("ab",["tk_asing" , "falso"]),
    ("ab",[]),
    ('float',[ "id" , "rr" , "PUNTOCOMA" ]),
    ('float',[ "id" , "PUNTOCOMA" ]),
    ("rr",[ "tk_coma" , "id" , "rr" , "ar" ]),
    ("rr",[]),
    ("ar",["tk_asing" , "tk_real"]),
    ("ar",[]),
    ('string',[ "id" , "rs" , "PUNTOCOMA" ]),
    ('string',[ "id" , "PUNTOCOMA" ]),
    ("rs",[ "tk_coma" , "id" , "rs" , "as" ]),
    ("rs",[]),
    ("as",["tk_asing" , "tk_cadena"]),
    ("as",[]),
    ('char',[ "id" , "rc" , "PUNTOCOMA" ]),
    ('char',[ "id" , "PUNTOCOMA" ]),
    ("rc",[ "tk_coma" , "id" , "rc" , "ac" ]),
    ("rc",[]),
    ("ac",["tk_asing" , "tk_caracter"]),
    ("ac",[]),
    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Punto y coma
    ("PUNTOCOMA",[ "tk_pyc" ]),
    ("PUNTOCOMA",[ "tk_pyc" , "tk_finLinea"])#+creo que toca agregar un nuevo token llamado fin de l√≠nea,que recibe '/n'
]