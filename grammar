grammar = [
    ('S',[ 'estructura' , 'id' , 'E' , 'fin_estructura' , 'S']),
    ('S',[ 'funcion' , 'entero' , 'id' , '(' , 'PARAMETROS' , ')' , 'hacer' , 'CUERPO' , 'retornar' , 'fin_funcion']),
    ('S',[ 'funcion' , 'booleano' , 'id' , '(' , 'PARAMETROS' , ')' , 'hacer' , 'CUERPO' , 'retornar' , 'fin_funcion']),
    ('S',[ 'funcion' , 'caracter' , 'id' , '(' , 'PARAMETROS' , ')' , 'hacer' , 'CUERPO' , 'retornar' , 'fin_funcion']),
    ('S',[ 'funcion' , 'real' , 'id' , '(' , 'PARAMETROS' , ')' , 'hacer' , 'CUERPO' , 'retornar' , 'fin_funcion']),
    ('S',[ 'funcion' , 'cadena' , 'id' , '(' , 'PARAMETROS' , ')' , 'hacer' , 'CUERPO' , 'retornar' , 'fin_funcion']),
    ('S',[ 'funcion_principal' , 'CUERPO' , 'fin_principal' ]),
    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ESTADOS PARA LA ESTRUCTURA
    ('E',[ 'DECLARACION' , 'E' ]),
    ('E',[]),
    ('DECLARACION',[ 'entero' , 'intd' ]),
    ('DECLARACION',[ 'booleano', 'boold' ]),
    ('DECLARACION',[ 'caracter', 'chard' ]),
    ('DECLARACION',[ 'real', 'floatd' ]),
    ('DECLARACION',[ 'cadena', 'stringd' ]),
    ('DECLARACION',[ ]),
    ('intd',[ 'id' , 'red' , 'PUNTOCOMA' , 'DECLARACION' ]),
    ('intd',[ 'id' , 'PUNTOCOMA' , 'DECLARACION' ]),
    ('red',[ 'tk_coma' , 'id' , 'red' ]),z
    ('red',[]),
    ('boold',[ 'id' , 'rbd' , 'PUNTOCOMA' , 'DECLARACION' ]),
    ('boold',[ 'id' , 'PUNTOCOMA' , 'DECLARACION' ]),
    ('rbd',[ 'tk_coma' , 'id' , 'rbd' ]),
    ('rbd',[]),
    ('floatd',[ 'id' , 'rrd' , 'PUNTOCOMA' , 'DECLARACION' ]),
    ('floatd',[ 'id' , 'tk_pyc' , 'DECLARACION' ]),
    ('rrd',[ 'tk_coma' , 'id' , 'rrd' ]),
    ('rrd',[]),
    ('stringd',[ 'id' , 'rsd' , 'PUNTOCOMA' , 'DECLARACION' ]),
    ('stringd',[ 'id' , 'PUNTOCOMA' , 'DECLARACION' ]),
    ('rsd',[ 'tk_coma' , 'id' , 'rsd' ]),
    ('rsd',[]),
    ('chard',[ 'id' , 'rcd' , 'PUNTOCOMA' , 'DECLARACION' ]),
    ('chard',[ 'id' , 'PUNTOCOMA' , 'DECLARACION' ]),
    ('rcd',[ 'tk_coma' , 'id' , 'rcd' ]),
    ('rcd',[]),
    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ESTADOS PARA LAS FUNCIONES
    ('PARAMETROS',[ 'entero' , 'id' , 'intp' ]),
    ('PARAMETROS',[ 'booleano', 'id' , 'boolp' ]),
    ('PARAMETROS',[ 'caracter', 'id' , 'charp' ]),
    ('PARAMETROS',[ 'real', 'id' , 'floatp' ]),
    ('PARAMETROS',[ 'cadena', 'id' , 'stringp' ]),
    ('intp',[ 'id' , 'tk_coma' , 'intp' ]),
    ('intp',[]),
    ('boolp',[ 'id' , 'tk_coma' , 'boolp' ]),
    ('boolp',[]),
    ('charp',[ 'id' , 'tk_coma' , 'charp' ]),
    ('charp',[]),
    ('floatp',[ 'id' , 'tk_coma' , 'floatp' ]),
    ('floatp',[]),
    ('stringp',[ 'id' , 'tk_coma' , 'stringp' ]),
    ('stringp',[]),
    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Punto y coma
    ('CUERPO',[ 'ESTRUCTURA_CONTROL' , 'CUERPO' ]),
    ('CUERPO',[ 'BINARIAS' , 'CUERPO' ]),
    ('CUERPO',[]),
    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ESTRUCTURAS DE CONTROL
    ('ESTRUCTURA_CONTROL' ,[ 'SI' , 'ESTRUCTURA_CONTROL' ]),
    ('ESTRUCTURA_CONTROL' ,[ 'PARA' , 'ESTRUCTURA_CONTROL' ]),
    ('ESTRUCTURA_CONTROL' ,[ 'MIENTRAS' , 'ESTRUCTURA_CONTROL' ]),
    ('ESTRUCTURA_CONTROL' ,[ 'MULTIPLE' , 'ESTRUCTURA_CONTROL' ]),
    ('ESTRUCTURA_CONTROL' ,[ ]),
    ('SI',[ 'si' , 'tk_par_izq' , 'LOGICAS' , 'tk_par_der' , 'entonces' , 'CUERPO' , 'fin_si']),
    ('SI',[ 'si' , 'tk_par_izq' , 'LOGICAS' , 'tk_par_der' , 'entonces' , 'CUERPO' , 'si_no' , 'CUERPO' , 'fin_si' ]),
    ('MIENTRAS',[ 'mientras' , 'tk_par_izq' , 'LOGICAS' , 'tk_par_der' , 'hacer' , 'CUERPO' , 'fin_mientras' ]),
    ('MIENTRAS',[ 'hacer' , 'CUERPO' ,'mientras' , 'tk_par_izq' , 'LOGICAS' , 'tk_par_der' ]),
    ('PARA',[ 'para' , 'tk_par_izq' , 'ASIGNACION' , 'tk_pyc' , 'LOGICAS' , 'tk_pyc' , 'tk_entero' , 'tk_par_der' , 'hacer' , 'CUERPO' , 'fin_para' ]),
    ('PARA',[ 'para' , 'tk_par_izq' , 'id' , 'tk_asignacion' , 'tk_entero' , 'tk_pyc' , 'LOGICAS' , 'tk_pyc' , 'tk_entero' , 'tk_par_der' , 'hacer' , 'CUERPO' , 'fin_para' ]),
    ('MULTIPLE',[ 'seleccionar' , 'tk_par_izq' , 'id' , 'tk_par_der' , 'entre' , 'CASOS' , 'fin_seleccionar' ]),
    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++OPERACIONES LOGICAS
    ('LOGICAS',[ 'LOGICAS' , 'OPERADORL' , 'LOGICAS' ]),
    ('LOGICAS',[ 'tk_par_izq' , 'LOGICAS' , 'tk_par_der' ]),
    ('LOGICAS',[ 'id' , 'OPERADORL' , 'id' ]),
    ('LOGICAS',[ 'id' , 'OPERADORL' , 'tk_entero' ]),
    ('LOGICAS',[ 'id' , 'OPERADORL' , 'verdadero' ]),
    ('LOGICAS',[ 'id' , 'OPERADORL' , 'falso' ]),
    ('LOGICAS',[ 'id' , 'OPERADORL' , 'tk_real' ]),
    ('LOGICAS',[ 'id' , 'OPERADORL' , 'tk_cadena' ]),
    ('LOGICAS',[ 'id' , 'OPERADORL' , 'tk_caracter' ]),
    ('LOGICAS',[ 'tk_entero' , 'OPERADORL' , 'id' ]),
    ('LOGICAS',[ 'verdadero' , 'OPERADORL' , 'id' ]),
    ('LOGICAS',[ 'falso' , 'OPERADORL' , 'id' ]),
    ('LOGICAS',[ 'tk_real' , 'OPERADORL' , 'id' ]),
    ('LOGICAS',[ 'tk_cadena' , 'OPERADORL' , 'id' ]),
    ('LOGICAS',[ 'tk_caracter' , 'OPERADORL' , 'id' ]),
    ('LOGICAS',[ 'BINARIAS' , 'tk_igual' , 'tk_entero' ]),
    ('LOGICAS',[ 'BINARIAS' , 'tk_igual' , 'verdadero' ]),
    ('LOGICAS',[ 'BINARIAS' , 'tk_igual' , 'falso' ]),
    ('LOGICAS',[ 'BINARIAS' , 'tk_igual' , 'tk_real' ]),
    ('LOGICAS',[ 'BINARIAS' , 'tk_igual' , 'tk_cadena' ]),
    ('LOGICAS',[ 'BINARIAS' , 'tk_igual' , 'tk_caracter' ]),
    ('LOGICAS',[ 'tk_entero' , 'tk_igual' , 'BINARIAS' ]),
    ('LOGICAS',[ 'verdadero' , 'tk_igual' , 'BINARIAS' ]),
    ('LOGICAS',[ 'falso' , 'tk_igual' , 'BINARIAS' ]),
    ('LOGICAS',[ 'tk_real' , 'tk_igual' , 'BINARIAS' ]),
    ('LOGICAS',[ 'tk_cadena' , 'tk_igual' , 'BINARIAS' ]),
    ('LOGICAS',[ 'tk_caracter' , 'tk_igual' , 'BINARIAS' ]),
    ('OPERADORL',[ 'tk_menor' ]),
    ('OPERADORL',[ 'tk_mayor' ]),
    ('OPERADORL',[ 'tk_menor_igual' ]),
    ('OPERADORL',[ 'tk_mayor_igual' ]),
    ('OPERADORL',[ 'tk_igual' ]),
    ('OPERADORL',[ 'tk_y' ]),
    ('OPERADORL',[ 'tk_o' ]),
    ('OPERADORL',[ 'tk_dif' ]),
    ('OPERADORL',[ 'tk_neg' ]),
    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++OPERACIONES BINARIAS
    ('BINARIAS',[ 'OP_BINARIAS' , 'PUNTOYCOMA']),
    ('OP_BINARIAS',[ 'tk_par_izq' , 'OP_BINARIAS' , 'tk_par_izq' ]),
    ('OP_BINARIAS',[ 'id' , 'OPERADOR' , 'id' ]),
    ('OP_BINARIAS',[ 'id' , 'OPERADOR' , 'tk_entero' ]),
    ('OP_BINARIAS',[ 'id' , 'OPERADOR' , 'tk_real' ]),
    ('OP_BINARIAS',[ 'tk_entero' , 'OPERADOR' , 'id' ]),
    ('OP_BINARIAS',[ 'tk_real' , 'OPERADOR' , 'id' ]),
    ('OPERADOR',[ 'tk_mas' ]),
    ('OPERADOR',[ 'tk_menos' ]),
    ('OPERADOR',[ 'tk_mult' ]),
    ('OPERADOR',[ 'tk_div' ]),
    ('OPERADOR',[ 'tk_mod' ]),
    ('OPERADOR',[ 'tk_asig' ]),
    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    ('ASIGNACION',[ 'entero' , 'int' ]),
    ('ASIGNACION',[ 'booleano', 'bool' ]),
    ('ASIGNACION',[ 'caracter', 'char' ]),
    ('ASIGNACION',[ 'real', 'float' ]),
    ('ASIGNACION',[ 'cadena', 'string' ]),
    ('int',[ 'id' , 're' , 'PUNTOCOMA' ]),
    ('int',[ 'id' , 'PUNTOCOMA' ]),
    ('re',[ 'tk_coma' , 'id' , 're' , 'ae' ]),
    ('re',[]),
    ('ae',['tk_asing' , 'tk_entero']),
    ('ae',[]),
    ('bool',[ 'id' , 'rb' , 'PUNTOCOMA' ]),
    ('bool',[ 'id' , 'PUNTOCOMA' ]),
    ('rb',[ 'tk_coma' , 'id' , 'rb' , 'ab' ]),
    ('rb',[]),
    ('ab',['tk_asing' , 'verdadero']),
    ('ab',['tk_asing' , 'falso']),
    ('ab',[]),
    ('float',[ 'id' , 'rr' , 'PUNTOCOMA' ]),
    ('float',[ 'id' , 'PUNTOCOMA' ]),
    ('rr',[ 'tk_coma' , 'id' , 'rr' , 'ar' ]),
    ('rr',[]),
    ('ar',['tk_asing' , 'tk_real']),
    ('ar',[]),
    ('string',[ 'id' , 'rs' , 'PUNTOCOMA' ]),
    ('string',[ 'id' , 'PUNTOCOMA' ]),
    ('rs',[ 'tk_coma' , 'id' , 'rs' , 'as' ]),
    ('rs',[]),
    ('as',['tk_asing' , 'tk_cadena']),
    ('as',[]),
    ('char',[ 'id' , 'rc' , 'PUNTOCOMA' ]),
    ('char',[ 'id' , 'PUNTOCOMA' ]),
    ('rc',[ 'tk_coma' , 'id' , 'rc' , 'ac' ]),
    ('rc',[]),
    ('ac',[ 'tk_asing' , 'tk_caracter']),
    ('ac',[]),
    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++CASOS
    ('CASOS',[ 'caso' , 'tk_entero' , 'tk_dosp' , 'CUERPO' , 'romper' , 'tk_pyc' , 'CASOS' ]),
    ('CASOS',[ 'defecto' , 'tk_dosp' , 'CUERPO' ]),
    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Punto y coma
    ('PUNTOCOMA',[ 'tk_pyc' ]),
    #('PUNTOCOMA',[ 'tk_pyc' , 'tk_finLinea'])#+creo que toca agregar un nuevo token llamado fin de l√≠nea,que recibe '/n'
]